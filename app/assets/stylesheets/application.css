/*
 * This is a manifest file that'll be compiled into application.css, which will include all the files
 * listed below.
 *
 * Any CSS (and SCSS, if configured) file within this directory, lib/assets/stylesheets, or any plugin's
 * vendor/assets/stylesheets directory can be referenced here using a relative path.
 *
 * You're free to add application-wide styles to this file and they'll appear at the bottom of the
 * compiled file so the styles you add here take precedence over styles defined in any other CSS
 * files in this directory. Styles in this file should be added after the last require_* statement.
 * It is generally better to create a new file per style scope.
 *
 *= require_tree .
 *= require_self
 */

 @import url("https://fonts.googleapis.com/css2?family=Roboto:wght@300;400&display=swap");

:root {
    --color-off-white: #f9fafa;
    --color-light-gray: #d4d9dd;
    --color-medium-gray:#576366;
    --color-dark-gray: #474545;
    --color-blue: #387bab;
    --border-radius: 4px;
    --font-family: 'Roboto', sans-serif;
    --body-font-size: 2rem;
    --small-font-size: 1.8rem;
    --width: 60%;
}

a:-webkit-any-link { text-decoration: none !important; }

html {
    box-sizing: border-box;
    /* This defines 1rem */
    font-size: 62.5%; /* 1rem=10px */
    scroll-behavior: smooth;
}

::after,
::before {
    margin: 0;
    padding: 0;
    box-sizing: inherit;
}

/* Remove 100vw causing overflow bug */
html,
body {
    max-width: 100%;
    overflow-x: hidden;
}

body {
    font-family: var(--font-family);
    font-style: normal;
    font-weight: 300;
    font-size: var(--body-font-size);
    background-color: white;
    color: black;
}

.container {
    height: 100%;
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.header {
    width: var(--width);
    text-align: left;
    font-size: 4.5rem;
    font-weight: 400;
    margin: 1.5rem 0 3rem;
}

.subheader {
    text-align: left;
    color: var(--color-dark-gray);
    font-size: var(--small-font-size);
    font-weight: 300;
    margin-bottom: 1rem;
}

.form {
    width: var(--width);
    background-color: white;
    box-shadow: 0px 2px 0px rgba(0, 0, 0, 0.15);
    border-radius: 5px;
}

.input-button {
    width: 100%;
    display: flex;
}

.input {
    box-sizing: border-box;
    flex: 1;
    font-size: var(--body-font-size);
    background-color: white;
    border-width: 2px;
    border-style: solid;
    border-color: var(--color-light-gray transparent --color-light-gray --color-light-gray);
    border-top-left-radius: var(--border-radius);
    border-bottom-left-radius: var(--border-radius);
    color: var(--color-dark-gray);
    padding: .75rem 1rem;
}

.button {
    box-sizing: border-box;
    background-color: var(--color-blue);
    border-width: 2px;
    border-style: solid;
    border-color: var(--color-blue --color-blue --color-blue transparent);
    border-top-right-radius: var(--border-radius);
    border-bottom-right-radius: var(--border-radius);
    color: white;
    font-size: 2rem;
    font-weight: 400;
    padding: 1.2rem 1.5rem;
}

.sentence {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    box-sizing: border-box;
    width: var(--width);
    position: relative;
    padding: 3rem;
    margin-bottom: 3rem;

    &::before {
        content: "";
        display: block;
        position: absolute;

        left: 0;
        top: 0;
        bottom: 0;
        border: .7rem solid var(--color-light-gray);
        border-width: 0 0 0 .7rem;
    }

    &__expression {
        margin-bottom: 2rem;
    }

    &__expressor {
        color: var(--color-dark-gray);

        &::before {
            content: "\2014"
        }
    }
}

.question {
    background-color: white;
}

.answer {
    background-color: lightyellow;
}

.backlink {
    width: var(--width);
    text-align: left;
    font-size: var(--small-font-size);

    a {
        text-decoration: none;
    }
}
